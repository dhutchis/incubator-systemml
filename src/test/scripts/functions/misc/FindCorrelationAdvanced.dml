
k = read($1)
k = as.scalar(k)
n = read($2)
n = as.scalar(n)
n13 = as.integer(n^(1.0/3.0))
n23 = as.integer(n^(2.0/3.0))
nlog = as.integer(log(n,2)+1)

# random matrix of -1 and 1
# todo optimize to 0 and 1
#AR = rand(rows=nlog, cols=n, min=0, max=1, pdf="uniform", sparsity=1.0)
#A = -1 * (AR <= 0.5) + (AR > 0.5)
A = read($3)

# Create S of size n x n23
S = matrix(0, rows=n, cols=n23)
for (i in 1:n23) {
	S[(i-1)*n13+1:i*n13, i] = matrix(1, rows=n13, cols=1)
}

# Create M of size n23 x nlog
M = matrix(0, rows=n23, cols=nlog)
for (i in 1:n23) { # todo: make parfor
	# draw k '1's in a row vector of length log n:
	# Generate k positions of '1's, then set those positions to 1.
	# Keep drawing k positions of '1's until no duplicate positions, as checked by sorting and comparing
	kvec = round(rand(rows=1, cols=k, min=1, max=nlog))
	kvecOrd1 = order(target=t(kvec), by=1, decreasing=FALSE, index.return=FALSE)
	kvecOrd = t(kvecOrd1)
	kvecResid = kvecOrd[,2:k] - kvecOrd[,1:k-1]
	while ( min(abs(kvecResid)) == 0 ) {
		kvec = round(rand(rows=1, cols=k, min=1, max=nlog))
        kvecOrd1 = order(target=t(kvec), by=1, decreasing=FALSE, index.return=FALSE)
        kvecOrd = t(kvecOrd1)
		kvecResid = kvecOrd[,2:k] - kvecOrd[,1:k-1]
	}
	for (j in 1:k) {
		jj = as.scalar(kvecOrd[1,j])
		M[i,jj] = 1.0
	}
}

G = (M %*% A) %% 4 - (k%%2) - 1
B = G %*% S

#(g1,g2) = maxIndex( t(B)%*%B - diag(diag(t(B)%*%B)) )
X =  t(B)%*%B - diag(diag(t(B)%*%B))
X_rowmax = rowMaxs(X) # col vector of max val in each row
g1 = as.scalar(rowIndexMax(t(X_rowmax))) # row index of max val
XR = X[g1,] # row vector
g2 = as.scalar(rowIndexMax(XR)) # col index of max val

print("(g1,g2): " + g1 + ", " + g2)

AG1 = A[, (g1-1)*n13+1:g1*n13]
AG2 = A[, (g2-1)*n13+1:g2*n13]
Y =  t(AG1)%*%AG2 - diag(diag(t(AG1)%*%AG2))

Y_rowmax = rowMaxs(Y) # col vector of max val in each row
Y_rowidx = as.scalar(rowIndexMax(t(Y_rowmax))) # row index of max val
YR = Y[Y_rowidx,] # row vector
Y_colidx = as.scalar(rowIndexMax(YR)) # col index of max val
# result: (Y_rowidx, Y_colidx)

i = as.matrix(Y_rowidx)
j = as.matrix(Y_colidx)
Z = cbind(i, j)

print("(i,j): " + Y_rowidx + ", " + Y_colidx)
write(Z, $4);
